use bevy::prelude::*;

use crate::input::component::{MovementInput, MovementStats, MovementState, PlayerControlled};

/// –°–∏—Å—Ç–µ–º–∞ –¥—ç—à–∞/—Ä—ã–≤–∫–∞
pub fn dash_system(
    mut query: Query<(
        &MovementInput,
        &MovementStats,
        &mut MovementState,
    ), With<PlayerControlled>>,
) {
    for (input, stats, mut state) in &mut query {
        // –î—ç—à –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∏ –µ—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª
        if input.dash && state.can_dash {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—ç—à–∞
            let dash_direction = if input.direction.length() > 0.0 {
                // –î—ç—à –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
                Vec3::new(input.direction.x, 0.0, -input.direction.y).normalize()
            } else {
                // –î—ç—à –≤–ø–µ—Ä–µ–¥, –µ—Å–ª–∏ –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
                Vec3::new(0.0, 0.0, -1.0)
            };
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –¥—ç—à–∞
            let dash_velocity = dash_direction * stats.dash_force;
            
            // –ó–∞–º–µ–Ω—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥—ç—à–∞
            state.velocity.x = dash_velocity.x;
            state.velocity.z = dash_velocity.z;
            
            // –ù–µ–±–æ–ª—å—à–æ–π –ø–æ–¥—ä–µ–º, –µ—Å–ª–∏ –Ω–∞ –∑–µ–º–ª–µ
            if state.is_grounded {
                state.velocity.y = stats.jump_force * 0.3;
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω
            state.dash_timer = stats.dash_cooldown;
            state.can_dash = false;
            
            println!("üí® –î—ç—à! –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {:?}, –°–∏–ª–∞: {}", dash_direction, stats.dash_force);
        }
    }
}
